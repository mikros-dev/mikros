// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_bff/user_bff_api_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source ./user_bff/user_bff_api_grpc.pb.go -destination ../../mock/services/user_bff/user_bff_api_grpc_mock.go
//

// Package mock_user_bff is a generated GoMock package.
package mock_user_bff

import (
	context "context"
	reflect "reflect"

	user_bff "github.com/mikros-dev/mikros/examples/protobuf-workspace/gen/go/services/user_bff"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserBffServiceClient is a mock of UserBffServiceClient interface.
type MockUserBffServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserBffServiceClientMockRecorder
	isgomock struct{}
}

// MockUserBffServiceClientMockRecorder is the mock recorder for MockUserBffServiceClient.
type MockUserBffServiceClientMockRecorder struct {
	mock *MockUserBffServiceClient
}

// NewMockUserBffServiceClient creates a new mock instance.
func NewMockUserBffServiceClient(ctrl *gomock.Controller) *MockUserBffServiceClient {
	mock := &MockUserBffServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserBffServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserBffServiceClient) EXPECT() *MockUserBffServiceClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserBffServiceClient) CreateUser(ctx context.Context, in *user_bff.CreateUserRequest, opts ...grpc.CallOption) (*user_bff.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*user_bff.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserBffServiceClientMockRecorder) CreateUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserBffServiceClient)(nil).CreateUser), varargs...)
}

// MockUserBffServiceServer is a mock of UserBffServiceServer interface.
type MockUserBffServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserBffServiceServerMockRecorder
	isgomock struct{}
}

// MockUserBffServiceServerMockRecorder is the mock recorder for MockUserBffServiceServer.
type MockUserBffServiceServerMockRecorder struct {
	mock *MockUserBffServiceServer
}

// NewMockUserBffServiceServer creates a new mock instance.
func NewMockUserBffServiceServer(ctrl *gomock.Controller) *MockUserBffServiceServer {
	mock := &MockUserBffServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserBffServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserBffServiceServer) EXPECT() *MockUserBffServiceServerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserBffServiceServer) CreateUser(arg0 context.Context, arg1 *user_bff.CreateUserRequest) (*user_bff.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*user_bff.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserBffServiceServerMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserBffServiceServer)(nil).CreateUser), arg0, arg1)
}

// MockUnsafeUserBffServiceServer is a mock of UnsafeUserBffServiceServer interface.
type MockUnsafeUserBffServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserBffServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeUserBffServiceServerMockRecorder is the mock recorder for MockUnsafeUserBffServiceServer.
type MockUnsafeUserBffServiceServerMockRecorder struct {
	mock *MockUnsafeUserBffServiceServer
}

// NewMockUnsafeUserBffServiceServer creates a new mock instance.
func NewMockUnsafeUserBffServiceServer(ctrl *gomock.Controller) *MockUnsafeUserBffServiceServer {
	mock := &MockUnsafeUserBffServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserBffServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserBffServiceServer) EXPECT() *MockUnsafeUserBffServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserBffServiceServer mocks base method.
func (m *MockUnsafeUserBffServiceServer) mustEmbedUnimplementedUserBffServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserBffServiceServer")
}

// mustEmbedUnimplementedUserBffServiceServer indicates an expected call of mustEmbedUnimplementedUserBffServiceServer.
func (mr *MockUnsafeUserBffServiceServerMockRecorder) mustEmbedUnimplementedUserBffServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserBffServiceServer", reflect.TypeOf((*MockUnsafeUserBffServiceServer)(nil).mustEmbedUnimplementedUserBffServiceServer))
}
